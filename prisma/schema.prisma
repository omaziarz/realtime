// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  role          UserRole  @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAvailable   Boolean   @default(false)
  adminDiscussionRequests AdminDiscussionRequest[]
  adminDiscussionChatMessages AdminDiscussionChatMessage[]
  adminDiscussionChats AdminDiscussionChat[]

  sentMessages UserMessage[] @relation("sentMessages")
  receivedMessages UserMessage[] @relation("receivedMessages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AdminDiscussionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model AdminDiscussionRequest {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    AdminDiscussionRequestStatus @default(PENDING)
  adminDiscussionChat AdminDiscussionChat?
}

model AdminDiscussionChat {
  adminDiscussionRequestId String @id
  adminDiscussionRequest   AdminDiscussionRequest @relation(fields: [adminDiscussionRequestId], references: [id], onDelete: Cascade)
  adminDiscussionChatMessages AdminDiscussionChatMessage[]

  handlingAdminId String @unique
  handlingAdmin   User @relation(fields: [handlingAdminId], references: [id], onDelete: Cascade)

  canUserSend Boolean @default(true)

}

model AdminDiscussionChatMessage {
  messageId String @id @default(cuid())
  adminDiscussionChatId String
  adminDiscussionChat   AdminDiscussionChat @relation(fields: [adminDiscussionChatId], references: [adminDiscussionRequestId], onDelete: Cascade)

  senderId String
  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content String
  sentAt DateTime @default(now())
}

model UserMessage {
  messageId String @id @default(cuid())

  senderId String
  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade, "sentMessages")

  receiverId String
  receiver   User @relation(fields: [receiverId], references: [id], onDelete: Cascade, "receivedMessages")

  content String
  sentAt DateTime @default(now())
}